/*
  자바스크립트는 웹 페이지에 있어서 보조적인 기능을 수행하기 위해 한정적인 용도로 만들어진 태생적 한계로 다른 언어에 비해 부족한(나쁜) 부분이 있는 것이 사실이다. 그 대표적인 것이 모듈 기능이 없는 것이다.

  브라우저 상에서 동작하는 Javscript는 script tag로 로드하여 복수의 Javscript 파일을 로드할 경우 하나의 파일로 merge 되며 동일한 유효범위를 갖게 된다.

  ES6에서는 Client-side Javascript 에서도 동작하는 모듈 기능을 추가하였다. 단 현재 대부분의 브라우저가 ES6 모듈을 지원하지 않고 있으므로 ES6 모듈을 현재의 브라우저에서 사용하기 위해서는 SystemJS, RequireJS 등의 모듈 로더 또는 Webpack 등의 모듈 번들러를 사용하여야 한다. ES6 모듈은 키워드 export, import를 제공한다.
  
    * 클라이언트 사이드(client-side)란 클라이언트 측에서 수행하는 처리를 의미한다.
    * 평소에 왜 웹 브라우저가 메모리를 많이 차지하지? 라는 의문을 가진적이 있다면 더 쉽게 접근할 수 있다. 현재 web 쪽에서 무거운 처리 대부분은
    * 클라이언트 사이드 언어로 작업하기 때문에 처리 비용이 높아서 메모리를 많이 먹는다고 볼 수 있다.
    * 

  javascript를 client-side에 국한하지 않고 범용적으로 사용하고자 하는 움직임이 생기면서 모듈 기능은 반드시 해결해야하는 핵심 과제가 되었고 이런 상황에서 제안된 것이 CommonJS와 AMD(Asynchronous Module Definition) 이다.

  Node.js는 모듈 시스템의 사실상 표준인 CommonJS를 채택하였고 현재는 독자적인 진화를 거쳐 CommonJS 사양과 100% 동일하지는 않지만 기본적으로 CommonJS 방식을 따르고 있다.

  Node.js는 모듈 단위로 각 기능을 분할할 수 있다. 모듈은 파일과 1:1 대응 관계를 가지며 하나의 모듈ㅇ느 자신만의 독립적인 실행 영역(Scope)를 가지게 된다. 따라서 클라이언트 사이드 javascript와는 달리 전역변수의 중복 문제가 발생하지 않는다.

  모듈은 module.exports 또는 exports 객체를 통해 정의하고 외부로 공개한다.
  그리고 공개된 모듈은 require 함수를 사용하여 import 한다.
*/