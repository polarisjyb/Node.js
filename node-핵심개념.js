/*
  서버는 네트워크를 통해 클라이언트에 정보나 서비스를 제공하는 컴퓨터 또는 프로그램을 말한다.
*/


/*
  Node.js 는 Chrome V8 Javascript 엔진으로 빌드된 Javascript *런타임* 이다.

  *런타임* 은 특정 언어로 만든 프로그램들을 실행할 수 있는 환경을 뜻한다.
  따라서 노드는 자바스크립트 프로그램을 컴퓨터에서 실행할 수 있다.
  쉽게 말해 노드는 자바스크립트 실행기라고 봐도 무방하다.
*/


/*
  이벤트 루프 : 이벤트 발생 시 호출할 콜백 함수들을 관리하고, 호출된 콜백 함수의 실행 순서를 결정하는 역할을 담당한다.
  노드가 종료될 때까지 이벤트 처리를 위한 작업을 반복하므로 루프(loop)라고 부른다.

  백그라운드 : setTimeout 같은 타이머나 이벤트 리스너들이 대기하는 곳이다.
  여러 작업이 동시에 실행될 수 있다.

  태스크 큐 : 이벤트 발생 후, 백그라운드에서는 테스크 큐로 타이머나 이벤트 리스너의 콜백 함수를 보낸다.
  정해진 순서대로 콜백들이 줄을 서 있으므로 '콜백 큐'라고도 부른다.
  콜백들은 보통 완료된 순서대로 줄을 서 있지만 특정한 경우에는 순서가 바뀌기도 한다.
*/

function first() {
  second();
  console.log('1');
}
function second() {
  third();
  console.log('2');
}
function third() {
  console.log('3');
}

first();

//  3
//  2
//  1


/*
  이벤트 루프를 잘 활용하면 오래 걸리는 작업을 효율적으로 처리할 수 있다.
  작업에는 두 가지 종류가 있는데, 동시에 실행될 수 있는 작업과 동시에 실행될 수 없는 작업이다.
  기본적으로 우리가 작성한 자바스크립트 코드는 동시에 실행될 수 없다.
  하지만 자바스크립트 상에서 돌아가는 것이 아닌 I/O 작업 같은 것은 동시에 처리될 수 있다.

  I/O 는 입력(Input) / 출력(Output)을 의미한다. 파일 시스템 접근(파일 읽기, 파일 쓰기, 폴더 만들기 등) 이나
  네트워크를 통한 요청 같은 작업이 I/O의 일종이다.

  이런 작업을 할 때 노드는 '논 블로킹' 방식으로 처리하는 방법을 제공한다.
  '논 블로킹' 이란 이전 작업이 완료될 때까지 대기하지 않고 다음 작업을 수행함을 뜻한다.
  반대로 '블로킹'은 이전 작업이 끝나야만 다음 작업을 수행하는 것을 의미한다.

  다만 작업들이 모두 동시에 처리될 수 있는 작업이라는 전제 하에 블로킹 방식보다 논 블로킹 방식이
  같은 작업을 더 짧은 시간에 처리할 수 있다.
*/

// function longRunningTask() {
//   // 오래 걸리는 작업
//   console.log('작업 끝');
// }

// console.log('시작');
// longRunningTask();
// console.log('다음 작업');

// 시작
// 작업 끝
// 다음 작업

function longRunningTask() {
  // 오래 걸리는 작업
  console.log('작업 끝');
}

console.log('시작');
setTimeout(longRunningTask, 0);
console.log('다음 작업');

// 시작
// 다음 작업
// 작업 끝


/*
  setTimeout(콜백, 0) 은 코드를 '논 블로킹' 으로 만들기 위해 사용하는 기법 중 하나이다.
  아무리 '논 블로킹' 방식으로 코드를 작성하더라도 코드가 전부 우리가 작성한 것이라면 전체 소요시간이 짧아지지는 않는다.
  우리가 작성한 코드는 서로 동시에 실행되지 않고 단순히 실행 순서만 바뀌기 때문이다.
  
  그렇다고 I/O 작업이 없다고 해서 '논 블로킹' 이 의미가 없는 것은 아니다.
  오래 걸리는 작업을 처리해야 하는 경우, '논 블로킹' 을 통해 실행 순서를 바꿔줌으로써
  그 작업 때문에 간단한 작업들이 대기하는 상황을 막을 수 있다는 점에서 의의가 있다.

  또한, '논 블로킹' 과 '동시' 가 같은 의미가 아니라는 것도 알아두자.

  setTimeout(콜백, 0) 이 밀리초를 0으로 설정했으므로 바로 실행되는 것으로 착각할 수 있다.
  하지만 브라우저와 노드에서는 기본적인 지연 시간이 있으므로 바로 실행되지 않는다.
  HTML5 브라우저에서는 4ms, 노드에서는 1ms의 지연 시간이 있다. ( 1000ms = 1s(초) )

  노드에서는 '동기' 와 '블로킹' 이 유사하고 '비동기' 와 '논 블로킹' 이 유사하다.
*/



