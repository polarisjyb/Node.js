// const http = require('http');

// http.createServer((req, res) => {
//   // 여기에 어떤 응답을 할지 적는다.
//   res.writeHead(200, { 'Content-Type' : 'text/html; charset=utf-8' });
//   res.write( '<h1>Hello Node!</h1>' );
//   res.end( '<p>Hello Server!</p>' );
// })
//   .listen(8080, () => { //서버 연결
//     console.log( '8080 포트에서 서버 대기 중입니다!');
//   });

/*
  200이나 500과 같은 숫자는 HTTP 상태 코드이다.
  res.writeHead에 첫 번째 인수로 상태 코드를 넣었는데, 브라우저는 서버에서 보내주는 상태 코드를 보고
  요청이 성공했는지 실패했는지를 판단한다. 대표적인 상태 코드들은 다음과 같다.

  2xx: 성공을 알리는 상태코드다. 대표적으로 200(성공), 201(작성됨)이 많이 사용된다.

  3xx: 리다이렉션(다른 페이지로 이동)을 알리는 상태 코드이다. 어떤 주소를 입력했는데 다룬 주소의 페이지로 넘어갈 때 이 코드가 사용된다.
  대표적으로 301(영구 이동), 302(임시 이동)가 있다. 304(수정되지 않음)는 요청의 응답으로 캐시를 사용했다는 뜻이다.

  4xx: 요청 오류를 나타낸다. 요청 자체에 오류가 있을 때 표시된다. 대표적으로 400(잘못된 요청), 401(권한 없음), 403(금지됨), 404(찾을 수 없음)가 있다.

  5xx: 서버 오류를 나타낸다. 요청은 제대로 왔지만 서버에 오류가 생겼을 때 발생한다. 이 오류가 뜨지 않게 주의해서 프로그래밍 해야한다.
  이 오류를 res.writeHead로 클라이언트에 직접 보내는 경우는 거의 없고, 예기치 못한 에러 발생 시 서버가 알아서 5xx대 코드를 보낸다.
  500(내부 서버 오류), 502(불량 게이트웨이), 503(서비스를 사용할 수 없음)이 자주 사용된다.
*/

/*
  요청 처리 과정 중에 에러가 발생했다고 해서 응답을 보내지 않으면 안된다. 요청이 성공했든 실패했든 응답을 클라이언트로 보내서
  요청이 마무리되었음을 알려야 한다. 응답을 보내지 않는다면, 클라이언트는 서버로부터 응답이 오길 하염없이 기다리다가 일정 시간후 Timeout(시간 초과) 처리한다.
*/