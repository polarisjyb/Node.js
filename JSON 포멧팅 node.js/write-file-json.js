/*
  프론트엔드와 백엔드의 결정적인 차이점을 꼽는다면 바로 write, 쓰기 권한의 유무가 단연 대표적이다.
  백엔드는 말 그대로 물밑작업, 기둥 작업, 설계 작업의 영역을 담당하기 때문에 쓰기 권한이 기본적으로 모두 열려 있다.

  프론트엔드 에서는 쓰기 권한이 기본적으로 차단되어 있는데

  1. 서버상태가 항상성(stable)을 가지고 유지되어야 한다.
  2. 요청과 응다벵 대한 프로그래밍적(순차) 처리가 작성, 진행되어야 한다.
  3. 원하지 않는 데이터에 대한 예외처리(exception handle)가 필요하다.
  4. 기타 보안 이슈, 공격 등등

  생각보다 통신을 통한 다수의 데이터 처리는 매우 까다로운 편에 속하기 때문에, '일부'의 기능을 열어두는 개념이 우리가 사용하는 웹 서비스의 기본 컨셉이다.

  골자는, "신원이 검증된 자만 쓰기 권한을 부여한다." 가 대부분의 비즈니스 모델이다. 따라서 본 예제는 server의 '극히 일부' 기능 범주로, 더 나아가 통신하고는 전혀 관계가 없는 점이 핵심이라 할 수 있다. 그저 프로그래밍 이다. 워낙에 node.js가 웹 서버와 겹치는 부분이 많아 발생하는 주변지식의 단면으로 생각된다.

  본 예제의 '목적'은 순수하게 JSON 형식의 파일을 저장하는 용도로만 작성되어 있다.
*/

const fs = require('fs');
// file system 내장 모듈을 commonJS 방식(cjs)으로 불러들여왔다.

const pokemonObj = {
  id : 1,
  pokemon : "이상해씨",
  type : "풀"
};
// pokemonobj JSON 을 저장하기 위해 수집한 객체방식의 데이터 인것을 가정한다.
const pokemonJSON = JSON.stringify(pokemonObj, null, 2);
//위 pokemonObj를 일련의 가공처리(JSON 포멧)으로 처리한 값을 pokemonJSON으로 대입했다.
// stringify(객체, 인덴팅 방식, 칸)
fs.writeFile('./pokemonJSON.json', pokemonJSON, (err) => {
  if(err) throw err;
});
// file system 에서 지원하는 파일 쓰기(write) === 파일 만들기 함수를 통해
// 해당 데이터를 json 방식으로 저장했다.

// 추후 DB를 관리하는 서버에서 해당 json 파이릉ㄹ '넘겨받아' 저장할 수 있다.